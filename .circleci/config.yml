jobs:
  infra:
    docker:
    - image: gandhark/ansibleterraformpython3:2.8
    steps:
    - checkout
    - attach_workspace:
        at: ~/
    - add_ssh_keys:
        fingerprints:
        - 7a:0d:f9:08:c0:b2:54:9c:97:8a:f8:0f:9d:d7:2a:1d
    - run:
        command: |
          cat ~/.env >> $BASH_ENV
          echo "export APP_PARENT=ws" >> ${BASH_ENV}
          echo "export APP_NAME=argosfx" >> ${BASH_ENV}
          echo 'export AWS_DEFAULT_REGION="eu-west-1"' >> ${BASH_ENV}
          echo 'export PACKER_LISTN_PORT="5986"' >> ${BASH_ENV}
          echo 'export ANSIBLE_HDIR="$CIRCLE_WORKING_DIRECTORY/ansible"' >> ${BASH_ENV}
          echo 'export APP_CONFIG_HOME="$CIRCLE_WORKING_DIRECTORY/ansible/config/$APP_NAME"' >> ${BASH_ENV}
          echo 'export GIT_SHA="$CIRCLE_SHA1"' >> ${BASH_ENV}
          cat ${BASH_ENV}
        name: Export shared environment variables for argosfx.
    - run:
        Name: Delete any SecurityGroups left by packer build.
        command: |
          export temp_sec_groups=$(aws ec2 describe-security-groups --filters Name=group-name,Values=packer_* | jq -r '.SecurityGroups[]|.GroupId')
          for group in $temp_sec_groups; do aws ec2 delete-security-group --group-id $group; done
    - run:
        command: |
          #export AWS_ACCOUNT_TYPE=$(cat ~/.env | grep 'AWS_ACCOUNT_TYPE' | awk -F " "  '{print $2}')
          #export APP_ENVIRONMENT=$(cat ~/.env | grep 'APP_ENVIRONMENT' | awk -F " "  '{print $2}')
          cd ansible && ansible-playbook -i hosts site.yml  -vvvv
        name: Execute ansible playbook to deploy infrastructure
        no_output_timeout: 1h
  sts:
    docker:
    - image: gandhark/circlecipython3ssm:latest
    steps:
    - checkout
    - run:
        command: |
          COMMIT_MSG=$(git log --format=oneline -n 1 $CIRCLE_SHA1)
          if [[ *"${COMMIT_MSG,,}"* == *"[bake_argos]"* ]]; then
            echo "[bake_argos] detected. Stopping. This job needs to be run only on launched instance."
            circleci step halt
          fi
        name: Halt/Stop Job if commit message like bake_points
    - attach_workspace:
        at: ~/
    - add_ssh_keys:
        fingerprints:
        - 7a:0d:f9:08:c0:b2:54:9c:97:8a:f8:0f:9d:d7:2a:1d
    - run:
        command: |
          GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" git clone git@github.com:travelex/it-infra-modules.git ~/it-infra-modules
          cp -Rf ~/it-infra-modules/ansible/roles/* ./ansible/roles/
        name: Clone it-infra-modules repository to get generic ansible roles
    - run:
        command: |
          cat ~/.env >> $BASH_ENV
          echo "export APP_PARENT=ws" >> ${BASH_ENV}
          echo "export APP_NAME=argosfx" >> ${BASH_ENV}
          echo 'export AWS_DEFAULT_REGION="eu-west-1"' >> ${BASH_ENV}
          echo 'export PACKER_LISTN_PORT="5986"' >> ${BASH_ENV}
          echo 'export ANSIBLE_HDIR="$CIRCLE_WORKING_DIRECTORY/ansible"' >> ${BASH_ENV}
          echo 'export APP_CONFIG_HOME="$CIRCLE_WORKING_DIRECTORY/ansible/config/$APP_NAME"' >> ${BASH_ENV}
          echo 'export GIT_SHA="$CIRCLE_SHA1"' >> ${BASH_ENV}
          cat ${BASH_ENV}
        name: Export shared environment variables for argosfx.
    - run:
        command: |
          export ANSIBLE_CONNECTION_TYPE="ssm"
          export ANSIBLE_PERSISTENT_COMMAND_TIMEOUT=6000
          echo Running Ansible using $ANSIBLE_CONNECTION_TYPE connection plugin in $APP_ENVIRONMENT environment
          instance_id=$(aws ec2 describe-instances --filter "Name=tag:Name,Values=${APP_ENVIRONMENT}-${APP_PARENT}-${APP_NAME}-server" "Name=instance-state-name,Values=running" --output text --query 'Reservations[*].Instances[*].InstanceId')
          echo -e "[${APP_ENVIRONMENT}]\n${instance_id}" > config/${APP_NAME}/inv/ssm.tmp
          cat config/${APP_NAME}/inv/ssm.tmp
          ansible-playbook -i config/${APP_NAME}/inv/ssm.tmp -c $ANSIBLE_CONNECTION_TYPE -e "targethosts=$APP_ENVIRONMENT" play-argosfx-site.yml -vvvvv --tags win_encrypt_webconfig,win_argos_service #--tags "win_encrypt_webconfig" #--tags "" #--skip-tags "download_s3_objects,win_cloudwatch_agent,win_iis_site,win_unzip,nssm_s3_sync,points,points_scheduler_service,win_xml,win_service"
        name: Execute ansible playbook using ssm connection
        no_output_timeout: 30m
        working_directory: ansible
references:
  add_ssh_keys_infra_modules:
    fingerprints:
    - 7a:0d:f9:08:c0:b2:54:9c:97:8a:f8:0f:9d:d7:2a:1d
  attach_workspace:
    attach_workspace:
      at: ~/
  bake_container_config:
    docker:
    - image: hashicorp/packer
  bake_container_packages:
    command: |
      apk add --no-progress --no-cache python py-pip libffi python-dev libffi-dev gcc musl-dev openssl-dev openssh openssh-client curl jq ruby ruby-dev build-base libxml2-dev libxslt-dev && pip install --upgrade pip awscli ansible boto3 botocore
    name: Install builder OS packages
  bake_container_pip_req:
    command: |
      pip install -q -r requirements.txt
    name: Install Python packages
    working_directory: ansible
  get_public_ip:
    command: |
      curl -s ifconfig.io/ip | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" > .my_ip
      if [ $? -ne 0 ]; then
        echo 'ifconfig failed'
        curl -s ipconfig.io/ip | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" > .my_ip
      fi
      cat .my_ip
    name: Discover my IP
  infra_modules_checkout:
    command: |
      GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" git clone git@github.com:travelex/it-infra-modules.git ~/it-infra-modules
      cp -Rf ~/it-infra-modules/ansible/roles/* ./ansible/roles/
    name: Clone it-infra-modules repository to get generic ansible roles
  load_bash_env:
    command: |
      cat ~/.env >> $BASH_ENV
      echo "export APP_PARENT=ws" >> ${BASH_ENV}
      echo "export APP_NAME=argosfx" >> ${BASH_ENV}
      echo 'export AWS_DEFAULT_REGION="eu-west-1"' >> ${BASH_ENV}
      echo 'export PACKER_LISTN_PORT="5986"' >> ${BASH_ENV}
      echo 'export ANSIBLE_HDIR="$CIRCLE_WORKING_DIRECTORY/ansible"' >> ${BASH_ENV}
      echo 'export APP_CONFIG_HOME="$CIRCLE_WORKING_DIRECTORY/ansible/config/$APP_NAME"' >> ${BASH_ENV}
      echo 'export GIT_SHA="$CIRCLE_SHA1"' >> ${BASH_ENV}
      cat ${BASH_ENV}
    name: Export shared environment variables for argosfx.
  packer_cleanup:
    Name: Delete any SecurityGroups left by packer build.
    command: |
      export temp_sec_groups=$(aws ec2 describe-security-groups --filters Name=group-name,Values=packer_* | jq -r '.SecurityGroups[]|.GroupId')
      for group in $temp_sec_groups; do aws ec2 delete-security-group --group-id $group; done
version: 2.0
workflows:
  build:
    jobs:
    - sts
    - infra:
        filters:
          branches:
            only:
            - develop
        requires:
        - sts
        - argos_bake
    - argos_bake:
        filters:
          branches:
            only:
            - feature/packer
        requires:
        - sts
    - argos_ssm:
        filters:
          branches:
            only:
            - develop
            - master
        requires:
        - sts
        - infra
  version: 2
